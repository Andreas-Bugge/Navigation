#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #
# Co-authors: Andreas Bugge & Mathies Schou #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


LINEAR_VEL = 0.22
STOP_DISTANCE = 0.05
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
TURNING_DISTANCE = 0.3

# Variables for benchmarks of runtime
# Colision counter to see reducion in colision as we optimize
Colisions = 0
# Victim counter to see the amount of victims 
Victims = 0
# Speed benchmarks 
Speed_accumilation = 0.01
Speed_update = 0.01

# Scane the cone area for distances to orient itself
Front_left_distance = 0.05
Left_distance = 0.05
Back_distance = 0.05
Right_distance = 0.05
Front_right_distance = 0.05
Front_distance = 0.5

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    # Turtlebot is moving forward
    def Forward (self,vel):
            twist = Twist()
            twist.linear.x = vel
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            rospy.loginfo('Moving forward!')

    # Turning turtlebot to the right
    def Turn_right (self,vel):
            twist = Twist()   
            twist.linear.x = LINEAR_VEL
            twist.angular.z = vel
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning to right!')

    # Turning turtlebot to the left
    def Turn_left (self,vel):
            twist = Twist()   
            twist.linear.x = LINEAR_VEL
            twist.angular.z = -vel
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning to left!')

    # Turtlebot is backing up
    def Backing (self,speed):
            twist = Twist()   
            twist.linear.x = -speed
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            rospy.loginfo('Backing!')

    # Turning around in case of encirclement
    def turning_around (self, vel):
            twist = Twist()
            twist.linear.x = 0.0
            twist.angular.z = math.pi
            self._cmd_pub.publish(twist)
            rospy.loginfo('Turning around!')


    def get_scan(self):
        
        # Global distances to make it possible for global variables to change
        global Front_left_distance
        global Left_distance
        global Back_distance
        global Front_right_distance
        global Right_distance
        global Front_distance

        # Makes a filter which sorts all our 0 out of the arrays.
        def filter_zero(arr):
            for i in range(len(arr)):
                if arr[i] == 0:
                      arr[i] = 3.5
                elif arr[i] == float('Inf') or arr[i] == int('Inf'):
                    scan_filter[i] = 3.5
                    print("No readings: Inf\n")
                elif math.isnan(arr[i]):
                    scan_filter[i] = 2.5
                print("No readings: NaN\n")
            return arr
        
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
    
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 6            # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            # Scans the specific angles and measures the distances
            print(scan)
            samples_front_left = filter_zero(scan.ranges[0:25])
            samples_left = filter_zero(scan.ranges[25:60])
            samples_back = filter_zero(scan.ranges[160:180])
            samples_right = filter_zero(scan.ranges[300:335])
            samples_front_right = filter_zero(scan.ranges[335:360])
            samples_front_cone = filter_zero(scan.ranges[345:15])
            scan_filter.extend(samples_front_left+samples_left+samples_back+samples_right+samples_front_right+samples_front_cone)
            # Looks for NaN/infinity numbers and sets them to base value of 3.5 meters
          for i in range(len(scan_filter)):
            if scan_filter[i] == float('Inf') or scan_filter[i] == int('Inf'):
                scan_filter[i] = 3.5
                print("No readings: Inf\n")
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 2.5
               print("No readings: NaN\n")

        # Takes the minimum distance in the array and sets its as distance
        Front_left_distance = min(samples_front_left)
        Left_distance = min(samples_left)
        Back_distance = min(samples_back)
        Front_right_distance = min(samples_front_right)
        Right_distance = min(samples_right)
        Front_distance = min(samples_front_cone)
      
        return scan_filter

    def obstacle(self):

        twist = Twist()
        turtlebot_moving = True

        global Front_left_distance
        global Left_distance
        global Back_distance
        global Front_right_distance
        global Right_distance

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            print(min_distance)
            global Speed_accumilation
            global Speed_update
            Speed_update += 1
            Speed_accumilation += LINEAR_VEL
            turtlebot_moving = True

             # If the turtlebot is moving forward in any way shape or form 
            if turtlebot_moving:
                # Get the min distance from the lidar from the front cone
                min_distance = Front_distance
                print(min_distance)
            
                # If the turtlebot is too close to an obstacle
                if min_distance < SAFE_STOP_DISTANCE:
                    # Stop and back up at -40 percent of the linear velocity
                    self.Backing(0.4*LINEAR_VEL)
                    turtlebot_moving = False
                
                # If scans is within boundaries to turn while moving forward
                elif min_distance < TURNING_DISTANCE:
                    # Checking it the obstacle is right or left major

                        # If the obstacle is to the left
                        if Front_left_distance > Front_right_distance:
                            # Turn to the right
                            self.Turn_right(0.4*LINEAR_VEL)
                        # If the obstacle is to the right
                        else:
                            # Turn to the left
                            self.Turn_left(0.4*LINEAR_VEL)
                    
                        turtlebot_moving = True
                    
                    #  If there is a clear path ahead, move forward
                else:
                    turtlebot_moving = True
        # If the turtlebot is not moving forward, there's a obstacle in the way
            else:
                self.Backing(0.4*LINEAR_VEL)

def main():
    global Speed_accumilation
    global Speed_update
    global Colisions

    # Benchmarks
    #Average_speed = Speed_accumilation/Speed_update



    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()