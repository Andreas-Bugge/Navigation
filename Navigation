#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist


LINEAR_VEL = 0.22
STOP_DISTANCE = 0.05
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR
turning_distance = 0.3

# variables

# colision counter to see reducion in colision as we optimize
colisions = 0
# victim counter to see the amount of victims 
victims = 0 
front_left_distance = 0.05
left_distance = 0.05
back_distance = 0.05
right_distance = 0.05
front_right_distance = 0.05

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
        self.obstacle()

    # Makes a filter which sorts all our 0 out of the arrays.
    def filter(arr):
        return list(filter(lambda x: x!= 0, arr))
        
    # Turning turtlebot to the right
    def Turn_right (self,vel):
            twist = Twist()   
            twist.linear.x = 0.0
            twist.angular.z = -vel
            self._cmd_pub.publish(twist)
            turtlebot_moving = True
            rospy.loginfo('turning!')

    # Turning turtlebot to the left
    def Turn_left (self,vel):
            twist = Twist()   
            twist.linear.x = 0.0
            twist.angular.z = -vel
            self._cmd_pub.publish(twist)
            turtlebot_moving = True
            rospy.loginfo('turning!')

    # Turtlebot is backingup
    def Backing (self,speed):
            twist = Twist()   
            twist.linear.x = -speed
            twist.angular.z = 0.0
            self._cmd_pub.publish(twist)
            turtlebot_moving = True
            rospy.loginfo('Backing!')

    def get_scan(self):
        global front_left_distance
        global left_distance
        global back_distance
        global front_right_distance
        global right_distance
        scan = rospy.wait_for_message('scan', LaserScan)
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 5            # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 360:
            scan_filter.append(scan.ranges[2])

        else:
            # scans the specific angles and measures the distances
            samples_front_left = filter(scan.ranges[0 : 25])
            samples_left = filter(scan.ranges[25 : 60])
            samples_back = filter(scan.ranges[160 : 180])
            samples_right = filter(scan.ranges[300 : 335])
            samples_front_right = filter(scan.ranges[335 : 360])

            # Looks for NaN/infinity numbers and sets them to base value of 3.5 meters
        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
                print("no readings: Inf\n")
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 3.5
                print("no readings: NaN\n")

        # takes the minimum distance in the array and sets its as distance
        front_left_distance = min(samples_front_left)
        left_distance = min(samples_left)
        back_distance = min(samples_back)
        front_right_distance = min(samples_front_right)
        right_distance = min(samples_right)
      
        return scan_filter

    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True
        global front_left_distance
        global left_distance
        global back_distance
        global front_right_distance
        global right_distance
        global SAFE_STOP_DISTANCE
        global turning_distance

        while not rospy.is_shutdown():
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)
            print(min_distance)
           
           #if hhfdh:
            #  self.Turn_to_right(0.8)
            if front_left_distance > S and front_right_distance > SAFE_STOP_DISTANCE
                turtlebot_moving = True
            
            elif front_left_distance > SAFE_STOP_DISTANCE and front_right_distance > SAFE_STOP_DISTANCE

            if min_distance < SAFE_STOP_DISTANCE:
                if turtlebot_moving:
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    turtlebot_moving = False
                    rospy.loginfo('Stop!')
            else:
                twist.linear.x = LINEAR_VEL
                twist.angular.z = 0.0
                self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    rospy.init_node('turtlebot3_obstacle')
    try:
        obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
